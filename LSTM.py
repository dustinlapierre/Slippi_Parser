from keras.preprocessing import sequence
from keras.models import Sequential, load_model
from keras.layers import Dense, Embedding
from keras.layers import LSTM
from keras.datasets import imdb
import numpy as np

model = load_model("dash_dance_classifier.h5")

#single timestep version
def make_prediction(data):
    batch_size = len(data)
    data = np.array(data, dtype=np.float32)
    data = data.reshape((1, batch_size, 8))
    pred = model.predict(data)
    print("Predicted classes:\n{}".format(pred > 0.5))
    return pred

"""
x = [[0, 20, -57.84187316894531, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 20, -55.57062530517578, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 20, -53.29937744140625, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 20, -51.02812957763672, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 20, -48.75688171386719, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 20, -46.485633850097656, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 20, -44.214385986328125, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 20, -41.943138122558594, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 20, -39.971885681152344, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 20, -38.000633239746094, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 20, -36.029380798339844, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 20, -34.058128356933594, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 20, -31.486879348754883, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 20, -28.915630340576172, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 21, -26.644380569458008, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 21, -24.373130798339844, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 21, -22.10188102722168, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 21, -19.830631256103516, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 21, -17.55938148498535, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 21, -15.288131713867188, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 21, -13.016881942749023, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 21, -10.74563217163086, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 21, -8.474382400512695, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 21, -6.203132629394531, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 21, -3.931882858276367, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 21, -1.6606330871582031, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 21, 0.6106166839599609, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 21, 2.881866455078125, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 21, 5.153116226196289, 9.999999747378752, 1.0, 0.0, 60.0, 4],
    [0, 21, 7.424365997314453, 9.999999747378752, 1.0, 0.0, 60.0, 4]]

make_prediction(x)

x = [[0, 20, -57.84187316894531, 9.999999747378752, 1.0, 0.0, 60.0, 4]]
make_prediction(x)
x = [[0, 20, -55.57062530517578, 9.999999747378752, 1.0, 0.0, 60.0, 4]]
make_prediction(x)
x = [[0, 20, -53.29937744140625, 9.999999747378752, 1.0, 0.0, 60.0, 4]]
make_prediction(x)
x = [[0, 20, -51.02812957763672, 9.999999747378752, 1.0, 0.0, 60.0, 4]]
make_prediction(x)
x = [[0, 20, -48.75688171386719, 9.999999747378752, 1.0, 0.0, 60.0, 4]]
make_prediction(x)
x = [[0, 20, -46.485633850097656, 9.999999747378752, 1.0, 0.0, 60.0, 4]]
make_prediction(x)
x = [[0, 20, -44.214385986328125, 9.999999747378752, 1.0, 0.0, 60.0, 4]]
make_prediction(x)
x = [[0, 20, -41.943138122558594, 9.999999747378752, 1.0, 0.0, 60.0, 4]]
make_prediction(x)
x = [[0, 20, -39.971885681152344, 9.999999747378752, 1.0, 0.0, 60.0, 4]]
make_prediction(x)
x = [[0, 20, -38.000633239746094, 9.999999747378752, 1.0, 0.0, 60.0, 4]]
make_prediction(x)
x = [[0, 20, -36.029380798339844, 9.999999747378752, 1.0, 0.0, 60.0, 4]]
make_prediction(x)
x = [[0, 20, -34.058128356933594, 9.999999747378752, 1.0, 0.0, 60.0, 4]]
make_prediction(x)
"""
